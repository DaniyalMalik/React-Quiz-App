{"version":3,"sources":["Components/Questions.js","App.js","reportWebVitals.js","index.js"],"names":["Questions","state","score","count","progress","attempted","onAnswerSelect","value","buttons","document","querySelectorAll","add","questions","length","setState","i","disabled","decodeURIComponent","correct_answer","getElementById","innerHTML","style","display","nextQuestion","this","maxScore","minScore","array","incorrect_answers","concat","className","category","difficulty","class","width","question","map","item","type","onClick","id","textAlign","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c2048828.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport questions from '../questions/questions.json';\r\n\r\nclass Questions extends Component {\r\n  state = {\r\n    score: 0,\r\n    count: 0,\r\n    progress: 5,\r\n    attempted: 0,\r\n  };\r\n\r\n  onAnswerSelect = (value) => {\r\n    let { count, score, attempted } = this.state;\r\n    var buttons = document.querySelectorAll('.options');\r\n    var add = (1 / questions.length) * 100;\r\n    this.setState({ attempted: attempted + 1 });\r\n    for (let i = 0; i < buttons.length; i++) {\r\n      buttons[i].disabled = true;\r\n    }\r\n    if (value === decodeURIComponent(questions[count].correct_answer)) {\r\n      this.setState({ score: score + add });\r\n      if (count + 1 === 20) {\r\n        document.getElementById('output').innerHTML =\r\n          '<h2>Correct!</h2><h2>Quiz Completed!</h2>';\r\n      } else {\r\n        document.getElementById('output').innerHTML = '<h2>Correct!</h2>';\r\n        document.getElementById('next').style.display = 'block';\r\n      }\r\n    } else {\r\n      if (count + 1 === 20) {\r\n        document.getElementById('output').innerHTML =\r\n          '<h2>Incorrect!</h2><h2>Quiz Completed!</h2>';\r\n      } else {\r\n        document.getElementById('output').innerHTML = '<h2>Incorrect!</h2>';\r\n        document.getElementById('next').style.display = 'block';\r\n      }\r\n    }\r\n  };\r\n\r\n  nextQuestion = () => {\r\n    let { count, progress } = this.state;\r\n    var buttons = document.querySelectorAll('.options');\r\n    this.setState({ count: ++count });\r\n    document.getElementById('next').style.display = 'none';\r\n    document.getElementById('output').innerHTML = '';\r\n    for (let i = 0; i < buttons.length; i++) {\r\n      buttons[i].disabled = false;\r\n    }\r\n    this.setState({ progress: progress + 5 });\r\n    if (count + 1 === 20) {\r\n      document.getElementById('next').disabled = true;\r\n    } else {\r\n      document.getElementById('output').innerHTML = '';\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { count, score, progress, attempted } = this.state;\r\n\r\n    var add = (1 / questions.length) * 100;\r\n\r\n    var maxScore = questions.length - attempted;\r\n    maxScore = maxScore * add + score;\r\n\r\n    var minScore = (score / 100) * 100;\r\n\r\n    var array = questions[count].incorrect_answers.concat(\r\n      questions[count].correct_answer\r\n    );\r\n\r\n    return (\r\n      <div className='container'>\r\n        <div className='card'>\r\n          <div className='card-header'>\r\n            <h2>\r\n              Question {count + 1} of {questions.length}\r\n            </h2>\r\n            <h6>{decodeURIComponent(questions[count].category)}</h6>\r\n            {questions[count].difficulty === 'hard' ? (\r\n              <div>\r\n                <i class='fas fa-star'></i>\r\n                <i class='fas fa-star'></i>\r\n                <i class='fas fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n              </div>\r\n            ) : questions[count].difficulty === 'medium' ? (\r\n              <div>\r\n                <i class='fas fa-star'></i>\r\n                <i class='fas fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <i class='fas fa-star'></i>\r\n                <i class='fas fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n                <i class='far fa-star'></i>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div class='progress'>\r\n            <div\r\n              class='progress-bar bg-secondary'\r\n              style={{ width: progress + '%' }}></div>\r\n          </div>\r\n          <div className='card-body'>\r\n            <p>\r\n              <b>{decodeURIComponent(questions[count].question)}</b>\r\n            </p>\r\n            <div className='row'>\r\n              {array.map((item) =>\r\n                questions[count].type === 'multiple' ? (\r\n                  <div className='col-md-3'>\r\n                    <button\r\n                      className='btn btn-dark options'\r\n                      value={decodeURIComponent(item)}\r\n                      type='submit'\r\n                      onClick={() =>\r\n                        this.onAnswerSelect(decodeURIComponent(item))\r\n                      }>\r\n                      {decodeURIComponent(item)}\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div className='col-md-3'>\r\n                    <button\r\n                      className='btn btn-dark options'\r\n                      value={decodeURIComponent(item)}\r\n                      type='submit'\r\n                      onClick={() =>\r\n                        this.onAnswerSelect(decodeURIComponent(item))\r\n                      }>\r\n                      {decodeURIComponent(item)}\r\n                    </button>\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n            <br />\r\n            <div id='output'></div>\r\n            <button\r\n              id='next'\r\n              style={{ display: 'none' }}\r\n              className='btn btn-dark'\r\n              onClick={this.nextQuestion}\r\n              type='submit'>\r\n              Next\r\n            </button>\r\n          </div>\r\n          <div className='card-footer'>\r\n            <h5 style={{ textAlign: 'left' }}>Score: {score}%</h5>\r\n            <h5 style={{ textAlign: 'right' }}>Max Score: {maxScore}%</h5>\r\n            <div className='row'>\r\n              <div className='col-md-12'>\r\n                <div class='progress'>\r\n                  <div\r\n                    class='progress-bar bg-dark'\r\n                    style={{ width: minScore + '%' }}></div>\r\n                  <div\r\n                    class='progress-bar bg-secondary'\r\n                    style={{ width: score + '%' }}></div>\r\n                  <div\r\n                    class='progress-bar bg-light'\r\n                    style={{ width: maxScore + '%' }}></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Questions;\r\n","import Questions from './Components/Questions';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Questions />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}